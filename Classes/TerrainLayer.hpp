//
//  TerrainLayer.hpp
//  Biome
//
//  Created by Logan Smith on 5/15/16.
//
//

#ifndef TerrainLayer_hpp
#define TerrainLayer_hpp

#include "cocos2d.h"
#include <deque>
#include "TerrainChunk.hpp"
#include "TerrainGenerator.hpp"
#include "ScrollingLayer.hpp"

/** @class TerrainLayer
 @brief A `TerrainLayer` is a node that generates a continuous terrain and provides options for scrolling it using the `ScrollingLayer` interface.
 
 Each TerrainLayer houses its own `TerrainGenerator` instance, so individual properties of terrain can be adjusted per-TerrainLayer, if there are multiple in a scene.
 
 The terrain generated by a TerrainLayer will fill up its whole content size width, and has a vertical range of its content size height.  By default, a TerrainLayer's content size is the screen size.  In other words, the hills and valleys of its terrain by default might fill up the whole vertical screen space.  To restrict this, set its content size height to a smaller value.
 
 Note: changing the content size of a TerrainLayer after it has already started generating terrains onscreen will likely make subsequent terrains not link up with the previous ones.
 
 A TerrainLayer can be "owned" by a SceneryLayer, in which case the `distanceFactor` of the two will be synced when `SceneryLayer::initDistanceFactor` is invoked.
 
 At the moment, only "forward" (camera to the right, terrain to the left) scrolling is supported.
 */
class TerrainLayer : public cocos2d::Node, public ScrollingLayer {
public:
    CREATE_FUNC(TerrainLayer);
    TerrainLayer()
    : ready( false ),
    distanceFactor( 0.f )
    {}
    bool init() override;
    
    /**
     * Get the height of the terrain at the given x coordinate.  The coordinate is given in screen coordinates for simplicity.  The x coordinate must therefore be a valid screen coordinate, or an exception will be thrown.
     @param x The x coordinate onscreen to sample.
     @return A float representing the height at x.
     */
    float getHeightForScreenXCoordinate( float x );
    
    void step( float dt ) override;
    
    /**
     * Automatically invoked the first time is the layer stepped, or upon pairing the layer with a SceneryLayer.  If you need to display the terrain before stepping it, or have some property change take effect immediately, you must invoke it manually.
     */
    void setUpTerrainLayer();
private:
    bool ready;
    TerrainGenerator generator;
    float distanceFactor; // 0 = camera plane, 1 = infinitely far
    
    std::deque<TerrainChunk*> terrainChunks;
    void handleCycling( ScrollingLayer::MoveDirection moveDirection ) override;
    void addNewTerrainChunk();
};

#endif /* TerrainLayer_hpp */
